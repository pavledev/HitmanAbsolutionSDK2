#pragma once

#include "ZHM5BaseCharacter.h"
#include "IFutureCameraState.h"
#include "ICharacterCollision.h"
#include "IHM5ActionEntityListener.h"
#include "ZHM5MorphemeNodeIds.h"
#include "SHitmanGameplayState.h"
#include "ZHitman5PermissionHandler.h"
#include "SOutfitData.h"
#include "sQueuedReset.h"
#include "sAimFlags.h"
#include "eMorphemeRequests.h"
#include "EHM5SoundFootwearType.h"
#include "SRecoilAnimInfo.h"
#include "EHitmanGState.h"
#include "ENetworkMoveStatus.h"
#include "ECustomFlags.h"
#include "SGameUpdateEvent.h"
#include "EBaseMovementType.h"
#include "ENetworkState.h"
#include "SComponentMapEntry.h"
#include "SMatrix.h"
#include "TArray.h"
#include "TEntityRef.h"
#include "TList.h"
#include "ZEntityRef.h"
#include "ZGameTime.h"
#include "ZMapPoly.h"
#include "ZResourcePtr.h"
#include "ZRuntimeResourceID.h"
#include "ZString.h"
#include "ZVariantRef.h"
#include "float1.h"
#include "float4.h"

class ZHM5InputControl;
class ZHM5WeaponControl;
class ZHM5ReloadController;
class ZHM5GuideController;
class IHM5ForceMovementCallBack;
class ZHM5SniperController;
class ZHM5MovementLedgeWalk;
class ZHM5MovementShootingBallet;
class ZHM5MovementCloseCombat;
class ZHM5TossController;
class ZHM5MovementVentilatorShaft;
class ZHM5CCTargetController;
class ZHM5MovementHideInCloset;
class ZHM5InputControlScheme;
struct SGameInput;
class ZHM5MovementToss;
class ICharacterController;
class IHM5ClothBundlePool;
class IHM5Item;
class IHM5ItemWeapon;
class IHM5Outfit;
class ISequenceEntity;
class IVariationResourceEntity;
class ZActor;
class ZComponentCreateInfo;
class ZDynamicResourceLibrary;
class ZFabricColliderBaseEntity;
class ZHM5Action;
class ZHM5ActionClient;
class ZHM5ActorControl;
class ZHM5AimAssist;
class ZHM5AimController;
class ZHM5BaseController;
class ZHM5BaseGuide;
class ZHM5BaseInventory;
class ZHM5BaseMovement;
class ZHM5BodyContainer;
class ZHM5CoverPlane;
class ZHM5DisguiseSafeZoneEntity;
class ZHM5DisguiseSafeZoneMovement;
class ZHM5EquipController;
class ZHM5FocusController;
class ZHM5GuideVentilatorShaft;
class ZHM5Health;
class ZHM5ItemWeapon;
class ZHM5LooseTargetEncounter;
class ZHM5MainCamera;
class ZHM5MovementCarryCivilian;
class ZHM5MovementCover;
class ZHM5MovementDead;
class ZHM5MovementDragBody;
class ZHM5MovementFiberWireKill;
class ZHM5MovementHumanShield;
class ZHM5MovementKickVictim;
class ZHM5MovementLadder;
class ZHM5MovementLedgeHang;
class ZHM5MovementLocomotion;
class ZHM5MovementOperateCPDoor;
class ZHM5MovementPullVictimThroughWindow;
class ZHM5MovementPushVictim;
class ZHM5MovementSurrender;
class ZHM5PostfilterController;
class ZHM5SneakController;
class ZHM5WeaponRecoil;
class ZHM5WeaponSet;
class ZHitmanMorphemePostProcessor;
class ZOutfitKitEntity;
class ZSpatialEntity;
class ZTargetTracker;
class ZTargetTrackerGUI;
struct SCameraUpdateEvent;
struct SCutSequenceData;
struct SHM5GameCamParams;
struct SHitInfo;
struct SMatrix43;
struct SSphereSweepInput;
struct SSphereSweepOutput;
struct STypeID;
struct sPelvisOffsetElement;

class ZHitman5 : public ZHM5BaseCharacter, public IFutureCameraState, public ICharacterCollision, public IHM5ActionEntityListener, public ZHM5MorphemeNodeIds
{
public:
	enum
	{
		COPYABLE = 0,
		ASSIGNABLE = 0
	};

	struct SLoadingOutfit
	{
		ZDynamicResourceLibrary* m_pOutfitLibrary;
		TEntityRef<IHM5Outfit> m_Outfit;
		bool m_bPlaceClothBundle : 1;
		bool m_bForce : 1;
		bool m_bEquipWhenReady : 1;

		SLoadingOutfit(const SLoadingOutfit& __that);
		SLoadingOutfit() = default;
		~SLoadingOutfit() = default;
		SLoadingOutfit& operator=(const SLoadingOutfit& __that);
	};

	struct SMetricState
	{
		float4 pos;
		float1 camangle;
		float1 angle;
		float hp;
		ZString outfit;
		ZString aistate;
		bool instinct;
		bool cover;
		bool running;
		bool scalecover;

		SMetricState(const SMetricState& __that);
		SMetricState() = default;
		~SMetricState() = default;
		SMetricState& operator=(const SMetricState& __that);
	};

	TArray<ZEntityRef> m_InitialInventoryItems;
	TEntityRef<IHM5ItemWeapon> m_FiberWire;
	bool m_bStoryModeFiberWire;
	ZRuntimeResourceID m_StreamableWeaponID;
	TEntityRef<IVariationResourceEntity> m_DefaultWeaponVariationResource;
	bool m_bStreamableWeaponGive;
	bool m_bStreamableWeaponDualWield;
	bool m_bStreamableDisguiseGive;
	ZRuntimeResourceID m_InitialOutfitID;
	TArray<TEntityRef<ZFabricColliderBaseEntity>> m_EnvironmentClothColliders;
	ZDynamicResourceLibrary* m_CurrentBonusWeapon;
	ZDynamicResourceLibrary* m_CurrentWeaponMaterial;
	TEntityRef<IHM5Item> m_rCurrentlyLoadingItem;
	TEntityRef<IHM5Item> m_rItemsHolstered[2];
	ICharacterController* m_pCharacterController;
	bool m_bPlayerCollisionEnabled;
	bool m_bPlayerNPCCollisionEnabled;
	bool m_bGravityEnabled;
	bool m_bFalling;
	float m_fFallVelocity;
	SHitmanGameplayState m_GameplayState;
	ZHitman5PermissionHandler m_PermissionHandler;
	ZHM5BaseMovement* m_pCurrentMovement;
	ZHM5BaseMovement* m_pCurrentMovement_PrevState;
	ZHM5BaseMovement* m_pMovements[32];
	ZHM5BaseController* m_pBaseControllers[5];
	ZGameTime m_tBlendInCommandStarted;
	ZGameTime m_tBlendInCommandStopped;
	ZGameTime m_tLastHardToSee;
	bool m_bBlendInEnding;
	ZHitmanMorphemePostProcessor* m_pMrPostProcessor;
	unsigned int m_nMrRequests[75];
	unsigned int m_nMrControlParams[76];
	ZHM5Health* m_pHealth;
	ZHM5InputControl* m_pInputControl;
	ZHM5InputControlScheme* m_pControlScheme;
	ZHM5WeaponControl* m_pWeaponControl;
	ZHM5ActorControl* m_pActorControl;
	ZHM5ReloadController* m_pReloadController;
	ZHM5BaseInventory* m_pBaseInventory;
	ZHM5ActionClient* m_pActionClient;
	ZHM5AimAssist* m_pAimAssist;
	ZHM5GuideController* m_pGuideController;
	ZHM5SneakController* m_pSneakController;
	ZHM5FocusController* m_pFocusController;
	EBaseMovementType m_eForceMovementType;
	IHM5ForceMovementCallBack* m_pForceMovementCallBack;
	ZMapPoly m_Mapper;
	float m_fUpperBodyOverrideWeight;
	unsigned int m_nLastSentRequest[5];
	bool m_bMorphemeIdsInitialized;
	SOutfitData m_CurrentOutfitData;
	ZRuntimeResourceID m_UnloadedOutfitResourceID;
	ZDynamicResourceLibrary* m_pCurrentOutfitLibrary;
	bool m_bOwnCurrentOutfitLibrary;
	SLoadingOutfit m_EquipOutfitAsyncParams;
	SLoadingOutfit m_UnloadedOutfitParams;
	TEntityRef<IHM5ClothBundlePool> m_ClothBundlePool;
	ZHM5PostfilterController* m_pHM5PostfilterController;
	sAimFlags m_AimFlags;
	ZHM5BaseGuide* m_pGuidesHMStandsOn[10];
	float m_fTechnRunSpeedFactor;
	bool m_bFirstColiDetected;
	float m_fTimeMultiplier;
	bool m_bFastTargetSelectionQueued;
	ZHM5CoverPlane* m_pNearestRail;
	TEntityRef<ZHM5BodyContainer> m_pNearestContainer;
	SMatrix m_mvCurrentPelvisOffset;
	TList<sPelvisOffsetElement> m_PelvisOffsets;
	bool m_bInterpolateTargetPelvisOffset;
	TEntityRef<ZHM5LooseTargetEncounter> m_rLooseTargetEncounter;
	ZEntityRef m_pRenderDestination;
	int m_nMaxGunAmmo;
	int m_nMaxRevolverAmmo;
	int m_nMaxSMGAmmo;
	int m_nMaxRifleAmmo;
	int m_nMaxSniperAmmo;
	int m_nMaxMGAmmo;
	int m_nMaxRPGAmmo;
	int m_nMaxShotgunAmmo;
	ZEntityRef m_rFailSafeDisarmWeapon;
	sQueuedReset m_Reset;
	float m_fRestartTime;
	float m_fBlendInStartFocus;
	unsigned long long m_nMovementFlags;
	unsigned int m_nLocomotionFlag;
	unsigned long long m_nCustomFlags;
	bool m_bDecriminalizedShooting;
	bool m_bDecriminalizedWeapons;
	bool m_bDecriminalizedAiming;
	bool m_bDecriminalizedCloseCombat;
	bool m_bDecriminalizedCrossdressing;
	bool m_bMinigame;
	ZGameTime m_tIllegalPushButtonTimer;
	SGameUpdateEvent m_currentUpdateEvent;
	short m_iQuadFocusID;
	short m_iQuadBackgrounID;
	short m_iQuadBurnID;
	short m_iQuadFocusSBID;
	short m_iTextID;
	ISequenceEntity* m_pPendingSequence;
	ZString m_sPendingSlotName;
	float m_fMoveLength;
	float m_fVelocity;
	float m_fPulse;
	ZHM5SniperController* m_pSniperController;
	bool m_bActivated : 1;
	bool m_bActivatingHitman : 1;
	bool m_bInEditMode : 1;
	TEntityRef<ZHM5MainCamera> m_rMainCamera;
	ZTargetTracker* m_pTargetTracker;
	ZTargetTrackerGUI* m_pTargetTrackerGUI;
	unsigned int m_paramCutSequenceFullBody;
	bool m_bLevelEnded;
	ZGameTime m_LastMetricsUpdateTime;
	SMetricState m_MetricState;
	float m_fCameraDeltaTime;
	bool m_bActiveCheckPoint;

	static SComponentMapEntry s_componentMap[0];

	~ZHitman5() override = default;
	ZVariantRef GetVariantRef() const override;
	int AddRef() override;
	int Release() override;
	void* QueryInterface(STypeID* iid) override;
	void Activate(const ZString& sSubset) override;
	void Deactivate(const ZString& sSubset) override;
	void OnEnterEditMode() override;
	void OnExitEditMode() override;
	void Init() override;
	bool PickupItem(const TEntityRef<IHM5Item>& rItem) override;
	bool SwapItem(const TEntityRef<IHM5Item>& rNewItem, const TEntityRef<IHM5Item>& rDisposedItem) override;
	void RemoveItemFromInventory(const TEntityRef<IHM5Item>& rItem) override;
	void AttachItemToRHand(const TEntityRef<IHM5Item>& rItem) override;
	void AttachItemToLHand(const TEntityRef<IHM5Item>& rItem) override;
	TEntityRef<IHM5Item> DetachItemFromRHand(bool bAddToPhysicWorld) override;
	TEntityRef<IHM5Item> DetachItemFromLHand(bool bAddToPhysicWorld) override;
	void ItemDestoyed(TEntityRef<IHM5Item> pItem) override;
	bool IsDead() const override;
	void GetCharacterOBB(SMatrix& m0, float4& vSize) const override;
	void ReinitializeMorphemeData() override;
	void GetOBB(SMatrix& mvCen, float4& vHalfSize) const override;
	float4 GetOBBRadius() const override;
	bool CreateBodyCollision() override;
	void UpdateBodyCollisionPoses(bool bMoveTransform) override;
	bool ShouldDoHardCrowdPushes() const override;
	void SetSequenceWeight(float weight, unsigned int track) override;
	void BlendOutSequenceWeights() override;
	void HandleMorphemeEntityIDChanged() override;
	bool EnsureBaseCharacterInit() override;
	virtual bool WillRequestBeReceived(eMorphemeRequests nRequest);
	virtual void FrameUpdate(const SGameUpdateEvent& updateEvent);
	virtual void FrameUpdate2(const SGameUpdateEvent& updateEvent);
	virtual void PlayImpactAnim(const float4& vDir);
	virtual bool HolsterCurrentWeapons();
	virtual float CalcGetBoneDamageMultiplier(unsigned int nHitBoneIndex);

	void YouGotHit(const SHitInfo& HitInfo) override;
	bool CanProjectileHitCharacter(const SHitInfo& HitInfo) override;
	unsigned short GetCollisionLayer() const override;

	void CutSequenceStarted(ISequenceEntity* pSequence, const ZString& sSlotName, float fBodyPartSelector) override;
	void CutSequenceUpdate(ISequenceEntity* pSequence, ZString sSlotName, float fWeight) override;
	void CutSequenceEnded(ISequenceEntity* pSequence, ZString sSlotName) override;
	void AbortCutSequence() override;
	bool SetCutSequenceData(ISequenceEntity* pSequence, const SCutSequenceData& cutSequenceData, const ZString& sSlotName, float fBodyPartSelector) override;

	ICharacterController* GetCharacterController() const override;

	IFutureCameraState::SCameraState GetFutureCameraState() override;
	IFutureCameraState::SCameraState GetCurrentCameraState() override;
	void DisableCameraControl() override;
	void EnableCameraControl() override;

	SMatrix GetCollisionCheckedMatPos(const SMatrix& MatPos) override;

	bool IsActionValid(ZHM5Action* pAction, const TEntityRef<ZHM5BaseCharacter>& pOperator) override;

	ZHitman5() = default;
	ZHitman5(const ZHitman5& __that);
	ZHitman5(ZComponentCreateInfo& pInfo);
	static void RegisterType();
	void OnSceneStopping();
	void DeactivateCheckPointBeforeSpawnDelete();
	void DeactivateCheckPoint(bool bSetCurrentMovement);
	void ActivateCheckPoint();
	void LevelEnded();
	int GetFramesPassed();
	void MoveToMatPos(SMatrix& mvMatPos, bool bResetLockPos, bool bTriggerChangerHandlers);
	bool IsDualEquipped();
	bool IsAiming() const;
	bool IsRunning() const;
	bool IsWalking() const;
	bool IsWalkingFast() const;
	bool IsWalkingSlowly() const;
	bool IsStanding() const;
	bool IsStrafing() const;
	void SetSneaking(bool bSet);
	float GetSneakWeight() const;
	bool CanBeArrested() const;
	bool ReadyForArrest() const;
	bool Arrest(const TEntityRef<ZActor>& rActor);
	float4 GetArrestPos() const;
	void PrepareForCutSequence();
	bool ActorIgnoreDamage(TEntityRef<ZActor> rActor) const;
	ZDynamicResourceLibrary* EquipOutfitFromCharacter(const TEntityRef<ZHM5BaseCharacter>& pCharacter, ZDynamicResourceLibrary* pNewOutfitLibrary);
	ZDynamicResourceLibrary* EquipOutfitFromClothBundle(const ZEntityRef& rOwner, ZDynamicResourceLibrary* pNewOutfitLibrary);
	TEntityRef<IHM5Outfit> GetOutfitFromClothBundle(const ZEntityRef& rOwner);
	ZRuntimeResourceID GetOutfitResourceFromClothBundle(const ZEntityRef& rOwner);
	bool IsChangingClothes() const;
	bool IsDoingDeadlyThrow() const;
	bool IsThrowingSomething() const;
	bool IsThrowingExplosives() const;
	bool IsFiberWiring() const;
	bool IsKnifingFromBehind() const;
	bool IsPerformingTakedown() const;
	bool IsKnifeKilling() const;
	bool IsKillingByPull() const;
	bool IsKillingByPush() const;
	bool IsKillingByKick() const;
	bool IsDisablingFuseBox() const;
	bool IsInContextActionInteraction() const;
	bool CanStartCloseCombat() const;
	ZHM5CCTargetController* GetCloseCombatTargetController() const;
	void OnWeaponFireProjectile(const TEntityRef<ZHM5ItemWeapon>& rWeapon);
	SRecoilAnimInfo GetRecoilAnimInfo(const TEntityRef<ZHM5ItemWeapon>& rWeapon, const bool bDual) const;
	bool IsPerformingIllegalPushButton() const;
	void SetIllegalPushButtonTimer(float fDuration);
	void CutSequenceStarted();
	void CutSequenceEnded();
	void InitInitialInventory();
	void ActivateFrameUpdate();
	void DeactivateFrameUpdate();
	void GeomTransformChangeCallback(const ZEntityRef& entity, const SMatrix43& mNewValue);
	void EnablePlayerCollision(bool bEnable);
	bool IsPlayerCollisionEnabled() const;
	void EnablePlayerNPCCollision(bool bEnable);
	bool IsPlayerNPCCollisionEnabled() const;
	void EnableGravity(bool bEnable);
	bool IsGravityEnabled();
	bool RightSideAim() const;
	void GetAimWeaponCollisionExtends(float4& vShoulder, float4& vMuzzle, bool bRightSideAim) const;
	void RelocatePlayerCollision(const float4& vPos);
	void EnableAnchorCollision(bool bEnable);
	void GetCapsulePropertiesInternal(float& fRadius, float& fHeight, float& fSkinWidth) const;
	void GetHitmanAABB(float4& vMin, float4& vMax) const;
	void GetHitmanAABB(SMatrix& m0, float4& s0) const;
	float4 GetSkinWidthVectorZ();
	bool OverlapWithGuideAnchor(ZHM5BaseGuide* pGuide);
	void SetLoadScreenActive(bool bActive);
	void PlayerCollision(SMatrix& mvFrom, SMatrix& mvTo, float fDeltaTime);
	void CreateCharacterController();
	void DestroyCharacterController();
	float4 CheckPlayerCollision(const float4& vTo, bool bCollisionEnabled);
	void CheckHitmanNPCCollision(SMatrix& mvFrom, SMatrix& mvTo);
	bool CheckWeaponCollision(SMatrix& mvFrom, SMatrix& mvTo);
	bool CheckWeaponCollisionOTS(SMatrix& mvFrom, SMatrix& mvTo);
	bool ShouldCheckWeaponCollision();
	float4 MinimizeWeaponCorrection(const SSphereSweepInput& coliin, const SSphereSweepOutput& coliout, const float4& vOffset);
	void DebugContactMaterial();
	void UpdateInstinctMode();
	void UpdateBlendIn(const SGameUpdateEvent& updateEvent);
	void UpdateAlternateFire();
	void UpdateMovementPostCam(SMatrix& mvFrom, SMatrix& mvTo);
	void SetCurrentMovement(ZHM5BaseMovement* pCurrentMovement);
	void CreateBaseMovements();
	void DestroyBaseMovements();
	void UpdateBaseMovements();
	void UpdateMovementRelatedCache();
	void UpdateMovementContext(ZHM5BaseMovement* pNextMovement);
	void SignalAgilitySoundManager(ZHM5BaseMovement* pPrevMovement, ZHM5BaseMovement* pNextMovement);
	void CreateControllers();
	void DestroyControllers();
	ZHM5BaseMovement* GetMovementOfType(EBaseMovementType eType) const;
	ZHM5MovementFiberWireKill* GetMovementFiberWireKill() const;
	ZHM5MovementPullVictimThroughWindow* GetMovementPullVictimFromWindow() const;
	ZHM5MovementCloseCombat* GetMovementCloseCombat() const;
	ZHM5DisguiseSafeZoneMovement* GetMovementDisguiseSafeZone() const;
	ZHM5MovementShootingBallet* GetMovementShootingBallet() const;
	ZHM5MovementLocomotion* GetMovementLocomotion() const;
	ZHM5MovementLedgeWalk* GetMovementLedgeWalk() const;
	ZHM5MovementLedgeHang* GetMovementLedgeHang() const;
	ZHM5MovementLadder* GetMovementLadder() const;
	ZHM5MovementHumanShield* GetMovementHumanShield() const;
	ZHM5MovementCarryCivilian* GetMovementCarryCivilian() const;
	ZHM5MovementCover* GetMovementCover() const;
	ZHM5MovementHideInCloset* GetMovementHideInCloset() const;
	ZHM5MovementToss* GetMovementToss() const;
	ZHM5MovementSurrender* GetMovementSurrender() const;
	ZHM5MovementOperateCPDoor* GetMovementOperateCPDoor() const;
	ZHM5MovementVentilatorShaft* GetMovementVentilatorShaft() const;
	ZHM5MovementPushVictim* GetMovementPushVictim() const;
	ZHM5MovementKickVictim* GetMovementKickVictim() const;
	ZHM5MovementDead* GetMovementDead() const;
	ZHM5MovementDragBody* GetMovementDragBody() const;
	bool IsSurendering() const;
	bool IsInSBExecutionMode() const;
	bool IsInSBTagMode() const;
	ZGameTime GetSBEndGameTime() const;
	bool IsInInteractiveCutsequence() const;
	void QueueForcedMovement(EBaseMovementType eMovementType, IHM5ForceMovementCallBack* pForceMovementCallBack);
	bool HasQueuedForceMovementCallBack(IHM5ForceMovementCallBack* pForceMovementCallBack) const;
	void ClearQueuedForceMovement();
	void ForceQueuedMovement(EBaseMovementType eMovementType, IHM5ForceMovementCallBack* pForceMovementCallBack);
	ZHM5Health* GetHealth() const;
	void SetItemHandling(bool bVal, const unsigned int iActionClientFilter);
	void SetCurrentControlScheme(ZHM5InputControlScheme* pNewControlScheme);
	ZHM5InputControl* GetInputControl() const;
	ZHM5InputControlScheme* GetControlScheme() const;
	SGameInput* GetGameInput() const;
	ZHM5WeaponControl* GetWeaponControl() const;
	ZHM5ActorControl* GetActorControl() const;
	ZHM5ReloadController* GetReloadController() const;
	ZHM5EquipController* GetEquipController() const;
	ZHM5WeaponRecoil* GetRecoilController() const;
	ZHM5BaseInventory* GetBaseInventory() const;
	ZHM5ActionClient* GetActionClient() const;
	ZHM5AimAssist* GetAimAssist() const;
	ZHM5AimController* GetAimController() const;
	ZHM5TossController* GetTossController() const;
	ZHM5GuideController* GetGuideController() const;
	ZHM5SneakController* GetSneakController() const;
	ZHM5FocusController* GetFocusController() const;
	void SetBurningFocusFlag(bool b);
	void AddFocus(float fDelta);
	bool HasFocus() const;
	void UpdateGameStateFromFocus();
	ZHM5BaseMovement* GetCurrentMovement() const;
	EBaseMovementType GetCurrentMovementType() const;
	ZHM5CoverPlane* GetCurrentCoverPlane();
	bool IsDoingCoverToCoverMove();
	bool GetUseCrowdCameraProfile() const;
	void Jump(const SMatrix& mTo, bool bResetLockPos);
	void ResetBlendInState();
	void DebugDisplayBones();
	void InitMorphemeIDs();
	bool SendRequestToActiveStateMachines(eMorphemeRequests nRequest);
	ZHitmanMorphemePostProcessor* GetPostProcessor() const;
	unsigned int* GetLastSentRequest();
	bool UnHolster(ZHM5WeaponSet& weaponSet);
	bool DropItem(const TEntityRef<IHM5Item>& rItem);
	bool PickupItemDirect(const TEntityRef<IHM5Item>& rItem);
	bool SwapItemDirect(const TEntityRef<IHM5Item>& rNewItem, const TEntityRef<IHM5Item>& rDisposedItem);
	bool CanPickOrSwap(const TEntityRef<IHM5Item>& rItem) const;
	bool CanOperateObject(ZHM5Action* pAction, bool& bShouldDisplayFarFeedback) const;
	void RegisterClothBundlePool(const TEntityRef<IHM5ClothBundlePool>& rPool);
	void EquipOutfitResource(ZRuntimeResourceID ridNewOutfitLibrary, const TEntityRef<IHM5Outfit> Outfit, bool bPlaceClothBundle, bool bForce);
	void EquipOutfitResourceAsync(bool bEquipWhenReady, ZRuntimeResourceID ridNewOutfitLibrary, const TEntityRef<IHM5Outfit> Outfit, bool bPlaceClothBundle, bool bForce);
	bool IsEquipOutfitAsyncReady() const;
	ZRuntimeResourceID GetEquipOutfitAsyncResourceID() const;
	void EquipOutfitResourceAsync_ManualFinish(ZRuntimeResourceID ridNewOutfitLibrary);
	void EquipOutfitResourceAsync_Abort(ZRuntimeResourceID ridNewOutfitLibrary);
	void UnloadCurrentOutfit();
	void ReloadCurrentOutfit();
	bool IsReloadingOutfitReady() const;
	bool IsCurrentOutfitReady() const;
	ZRuntimeResourceID GetCurrentOutfitResourceID();
	ZEntityRef GetCurrentOutfitEntity();
	const SOutfitData& GetOutfitData() const;
	ZResourcePtr GetOutfitMovie() const;
	EHM5SoundFootwearType GetOutfitFootwearType() const;
	TEntityRef<ZOutfitKitEntity> GetOutfitKit() const;
	float GetMorphemeBlindFireWeight() const;
	const ZEntityRef& GetMorphemeVariationResource() const;
	void SetMorphemeVariationResource(ZEntityRef pVariationResource);
	ZEntityRef GetInitialOutfitEntity() const;
	bool IsInDisguise() const;
	void LoadWeaponMaterial(const TEntityRef<IHM5Item>& rItem);
	void ReleaseWeaponMaterial(const TEntityRef<IHM5Item>& rItem);
	void CacheCCAnims(const TEntityRef<ZActor>& rActor);
	void EquipOutfitInternal(ZDynamicResourceLibrary* pNewOutfitLibrary, const TEntityRef<IHM5Outfit> Outfit, bool bPlaceClothBundle, TEntityRef<ZSpatialEntity> pClothBundlePosition, bool bForce);
	void ReleaseCurrentOutfitInternal();
	void EquipOutfitResourceAsync_Internal(SLoadingOutfit& equipParams, bool bEquipWhenReady, ZRuntimeResourceID ridNewOutfitLibrary, const TEntityRef<IHM5Outfit> Outfit, bool bPlaceClothBundle, bool bForce);
	void EquipOutfitResourceAsync_Abort_Internal(SLoadingOutfit& equipParams, ZRuntimeResourceID ridNewOutfitLibrary);
	void OnLoadingOutfitStatusChanged(const ZRuntimeResourceID& rid);
	void FinishAsyncEquipOutfit(SLoadingOutfit& equipParams);
	void ClearEquipOutfitParams(SLoadingOutfit& equipParams);
	void SetHitmanPostfilterController(ZHM5PostfilterController* pHM5PostfilterController);
	ZHM5PostfilterController* GetHitmanPostfilterController() const;
	IHM5ClothBundlePool* GetClothBundlePool();
	void StopDragBody();
	void StopKillingMovements();
	const TEntityRef<ZActor> GetDragVictim() const;
	float4 GetCurrentFacing() const;
	unsigned int* GetRequests();
	unsigned int* GetControlParams();
	bool IsPushVictimPossible() const;
	bool IsKickVictimPossible() const;
	bool IsFiberWireKillPossible() const;
	bool IsPullVictimPossible() const;
	bool GetFreeCamPos(SMatrix43& mvPos);
	bool IsGuideInGuidesList(ZHM5BaseGuide* pGuide);
	bool IsGuidesListEmpty();
	void ResetGuidesList();
	void UpdateGuidesList();
	void SetHangOnLedgeMovementGuide(ZHM5BaseGuide* pGuide);
	void SetWalkOnLedgeMovementGuide(ZHM5BaseGuide* pGuide);
	bool IsEnteringWindow() const;
	bool IsMovingOnLedge() const;
	bool IsMountingLedge() const;
	void DebugDisplayStatus();
	void DebugDisplayMorphemeStatus();
	void CheckFirstColi();
	void SetHitmanTimeMultiplier(float fTimeMultiplier, const bool bFromManager);
	bool SelectOTSMode();
	void DeSelectOTSMode();
	bool EnterOTSMode();
	void ExitOTSMode();
	void UpdateOTSMode();
	void SetOTSModeActive(bool bOTS);
	void SetIsInInstinctMode(bool bVal);
	bool GetIsInInstinctMode() const;
	void QueueFastTargetSelection();
	int GetControllerId() const;
	SMatrix CalcTorsoColiMatPos() const;
	SMatrix CalcHeadColiMatPos() const;
	SMatrix CalcLeftCalfColiMatPos() const;
	SMatrix CalcRightCalfColiMatPos() const;
	bool IsShootingInCover();
	bool IsBlindFiring();
	bool IsInDisguiseSafeZone() const;
	void UpdateNearestRail();
	ZHM5CoverPlane* GetNearestRail() const;
	bool IsDumpingBody() const;
	void ExitSniperMode();
	bool EnterSniperMode();
	void UpdateSniperMode();
	void SetNearestContainer(ZHM5Action* pAction);
	TEntityRef<ZHM5BodyContainer> GetNearestContainer() const;
	void ResetPelvisOffset(void* pClassPtr);
	void SetPelvisOffset(const SMatrix& mvOffset, void* pClassPtr);
	SMatrix GetCurrentPelvisOffset();
	SMatrix GetTargetPelvisOffset();
	void SetInterpolatePelvisOffset(bool bInterpolate);
	void UpdatePelvisOffset();
	void Die(const SHitInfo& HitInfo);
	void SetLooseTargetEncounterCutRef(TEntityRef<ZHM5LooseTargetEncounter> rLooseTargetEncounter);
	void PlayTargetEncounterCut() const;
	bool PrepareTargetEncounterCut() const;
	bool CanPlayLooseTargetEncounterCut() const;
	TEntityRef<ZHM5LooseTargetEncounter> GetLooseTargetEncounter() const;
	bool IsOperatingCheckPointDoor() const;
	SMatrix GetClosetMatrix() const;
	bool IsEnteringCloset() const;
	bool IsExitingCloset() const;
	void SetInsideCloset(bool bValue);
	bool IsClosetPeekPossible() const;
	bool ActivateEnterSafeZone(TEntityRef<ZHM5DisguiseSafeZoneEntity> rSafeZone);
	bool ActivateExitSafeZone();
	bool IsInSafeZoneMovement() const;
	bool IsDisablingFusebox() const;
	void ActivateEnterVentilatorShaft(TEntityRef<ZHM5GuideVentilatorShaft> rVentilatorShaft);
	bool IsInVentilatorShaft() const;
	bool IsVentilatorShaftPeekPossible() const;
	bool IsVentilatorShaftExitPossible() const;
	bool IsEnteringVent() const;
	bool IsExitingVent() const;
	bool IsTakingKeycard() const;
	bool IsUsingKeyCardReader() const;
	bool IsTakingSecurityTape() const;
	void SetInMinigame(bool bMiniGame);
	bool IsInMinigame() const;
	void SetIsInCloseCombat(bool bVal);
	ZEntityRef GetRenderDestination();
	TEntityRef<IHM5ItemWeapon> GetFailSafeDisarmWeapon() const;
	void QueueReset(const SMatrix& mvNewPos);
	void ResetImmediate(const SMatrix& mvNewPos);
	void UpdateHandleReset();
	bool IsFiberWireEquipped() const;
	bool IsEquipFiberWireReady() const;
	bool IsNonFireArmEquipped() const;
	bool IsFireArmEquipped() const;
	bool IsRifleEquipped() const;
	bool QueryHM5Flag(EHitmanGState queryFlag) const;
	const SHitmanGameplayState& GetHitmanGameplayState() const;
	ZHitman5PermissionHandler& GetPermissionHandler();
	const ZHitman5PermissionHandler* GetPermissionHandler() const;
	bool GuideActionPerform() const;
	bool GuideActionPerformSecondary() const;
	bool IsInCarryCivilianMovement() const;
	ENetworkState GetLocomotionStartState();
	bool IsMovementEnabled(EBaseMovementType eMovement) const;
	bool IsLocomotionEnabled(ENetworkMoveStatus eNetworkMoveStatus) const;
	bool BlockedByCrowd() const;
	bool IsCustomFlagEnabled(ECustomFlags eCustomFlags) const;
	bool IsItemsEnabled() const;
	void SetMovementAndLocomotionFlags(unsigned long long nMovementFlags, unsigned int nLocomotionFlags, unsigned long long nCustomFlags);
	void SetMovementAndLocomotionFlagsDefault(unsigned long long nMovementFlags, unsigned int nLocomotionFlags, unsigned long long nCustomFlags);
	bool IsInSequence() const;
	bool CanSkipSequence() const;
	void SetDecriminalizedShooting(bool b);
	bool GetDecriminalizedShooting() const;
	void SetDecriminalizedWeapons(bool b);
	bool GetDecriminalizedWeapons() const;
	void SetDecriminalizedAiming(bool b);
	bool GetDecriminalizedAiming() const;
	void SetDecriminalizedCloseCombat(bool b);
	bool GetDecriminalizedCloseCombat() const;
	void SetDecriminalizedCrossdressing(bool b);
	bool GetDecriminalizedCrossdressing() const;
	const SGameUpdateEvent& CurrentUpdateEvent() const;
	float CurrentGameTimeDeltaNormalized() const;
	ZGameTime CurrentGameTimeDelta() const;
	float CurrentGameTimeMultiplier() const;
	ZGameTime CurrentRealTimeDelta() const;
	float GetVelocity() const;
	float GetMoveLength() const;
	void SetupAimAssists(float fBlendInTime, float fAimTime);
	void SetHoldsUtilityMode(bool bSet);
	void HandleCustomFlagSequence(unsigned long long nCustomFlags);
	void SetAvoidParams(float fLeftRight, float fBlend);
	void HitmanFailedAnimationPackBugAnimators();
	void UpdateWeaponStreaming();
	void UpdatePulse(float fDeltaTime);
	void GetPulse(float& fPulse, float& fWalkPulse);
	ZHM5MainCamera* GetMainCamera() const;
	void UpdateCameraProfile(SHM5GameCamParams& CurrentProfile);
	void UpdateCameraEvent(SCameraUpdateEvent& CameraUpdateEvent) const;
	ZHM5SniperController* GetSniperController() const;
	bool DrawHitmanInFPSMode() const;
	ZTargetTracker* GetTargetTracker() const;
	ZTargetTrackerGUI* GetTargetTrackerGUI() const;
	void InitSequenceRelatedFields();
	void SetDrawAsPlayerRecursive(ZEntityRef rEntity, const bool bState);
	void UpdateMetrics();
	ZHitman5& operator=(const ZHitman5& __that);
};
