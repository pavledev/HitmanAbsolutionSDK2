#pragma once

#include "ZHM5BaseMovement.h"
#include "ZHM5CCAnimDatabase.h"
#include "ZHM5CCAnimController.h"
#include "ECCLeeState.h"
#include "sAutopilotTakedownMarker.h"
#include "ZMapStep.h"
#include "EAISharedEventType.h"
#include "ZHM5CoverPlane.h"

class ZHM5MovementCloseCombat : public ZHM5BaseMovement
{
public:
	enum ECCLeeState
	{
		eIdle = 0,
		eSendRequest = 1,
		eCloseCombat = 2,
		eCCTerminateControl = 3
	};

	ZHM5CCAnimDatabase* m_pAnimDatabase;
	ZHM5CCAnimController* m_pAnimController;
	ZHM5CCTargetController* m_pTargetController;
	SHM5CCTarget* m_pTarget;
	SHM5CCTarget* m_pNextTarget;
	int m_ePreTargetState;
	int m_eNextTargetState;
	TEntityRef<ZActor> m_rPreTarget;
	bool m_bTransitionToLocomotionCam;
	bool m_bSetForcedPos;
	ECCLeeState m_eCCLeeState;
	bool m_bAttackAvailable;
	bool m_bUpdateAttackTime;
	bool m_bAttackExecuted;
	bool m_bMissed;
	bool m_bForceCounter;
	bool m_bForceMovement;
	bool m_bSpecialHitAllowed;
	float m_fSpecialTime;
	float m_fHitmanReactTime;
	bool m_bTakeDown;
	bool m_bTakeDownExecuted;
	bool m_bTakeDownMissed;
	bool m_bCounterNPC;
	bool m_bStairsLastReactMove;
	bool m_bHitmanKnockOut;
	float m_fCounterTime;
	float m_fAttackTime;
	float m_fCloseCombatCoolDown;
	float m_fTimeInCurrentState;
	const SAnimNodeHitman* m_pCurrentNode;
	float m_fSoundFractionPlayer;
	float m_fSoundFractionPlayerSent;
	ZPF5Location m_CCLocation;
	bool m_bEscape;
	bool m_bTakeDownOverride;
	ECCNodeType m_ePendingTransit;
	unsigned int m_nPendingNodeNum;
	bool m_bNodeTransitted;
	bool m_bAutopilotTakedown;
	sAutopilotTakedownMarker m_AutopilotTakedownMarkerLocations[2];
	ZGameTime m_AutopilotTakedownStartTime;
	bool m_bAutopilotTakedownSuccess;
	unsigned int m_nAutopilotAttack;
	bool m_bNPCFiring;
	int m_nMashNum;
	float m_fDecayTime;
	float m_fDecayFraction;
	float m_fChokeFraction;
	ZGameTime m_ChokeRumbleStart;
	unsigned int m_iImpactNum;
	bool m_bInSlowdownWindow;
	bool m_bAllowHitmanMoveFromStand;
	bool m_bAllowHitmanMoveFromCrouch;
	bool m_bAttackButtonActivated;
	bool m_bSnapNeckButtonActivated;
	bool m_bButtonPromptsOnScreen;
	bool m_bTakeDownWindowActive;
	int m_eCCButtonActivated;
	int m_eCCChoiceActive;
	bool m_bCCShowChoice;
	bool m_bCCShowIcons;
	bool m_bCCShowFlashingIcons;
	bool m_bCCChoiceSuccess;
	bool m_bCCChoiceFail;
	bool m_bCCContinueAttack;
	bool m_bCCPerfectChain;
	bool m_bUseMirroredAnims;
	bool m_bWasInCover;
	bool m_bFailedAttackChain;
	bool m_bCCAttackHit;
	bool m_bCCAllowInterupt;
	bool m_bInAttackWindow;
	bool m_bIsAttacking;
	float m_fReactCountdown;
	float m_fCurTimeMultiplier;
	int m_iNumButtonPushes;
	int m_iNumSanchezLoops;
	bool m_bGrabHumanShield;
	bool m_bSilentStrangle;
	int m_nImpactCounter;
	float m_afTakeDownWindow[8];
	float m_fTakeDownWindowDuration;
	float m_fTakeDownWindowScale;
	ZMapStep m_MapRumbleRight;
	ZMapStep m_MapRumbleLeft;
	ZMapPoly m_MapRumbleFrequency;
	bool m_bRumbleRightHigh;
	bool m_bRumbleLeftHigh;
	float m_fRightRumble;
	float m_fLeftRumble;
	bool m_bCameraInitialized;
	float4 m_vCurrentFocusPoint;
	float4 m_vDesiredFocusPoint;
	float m_fDesiredHeight;
	SMatrix m_CameraGround;
	float m_fCurCamStickLength;
	float m_fCurCamHeight;
	float m_fCameraBlendInTime;
	float m_fCameraHeightFraction;
	bool m_bAutofail;
	bool m_bSuperEliteFinish;
	ZMapPoly m_PistolFinisherCamHeight;
	bool m_bCCScaleUpActor;
	float m_fCCScaleBlendCur;
	float m_fCCScaleBlendTarget;
	int m_iCCScaleBlendTime;
	float m_fAlignYawAngle;
	bool m_bAlignYawAngle;
	EActorDeathType m_eActorDeathType;
	EAISharedEventType m_eAIEvent;
	TArray<TEntityRef<ZActor>> m_IgnoreTargets;
	TEntityRef<ZActor> m_rHumanShieldTarget;
	SMatrix m_mvCoverCameraGround;
	ZHM5CoverPlane* m_pCoverPlane;
	float4 m_vForceAlign;
	bool m_bCoverTakeDown;
	bool m_bForceAlign;
	bool m_bBlendCameraGround;
	bool m_bBossDeathSequence;
	unsigned int m_nCameraAnim;

	~ZHM5MovementCloseCombat() override = default;
	void CollectPreUpdateInfo(const ZHM5BaseMovement* pCurrentMovement) override;
	bool WantControl() const override;
	void GotControl(ZHM5BaseMovement* pPrevMovement, bool bForced) override;
	void DeactivateMovement() override;
	void UpdateColiCheckedGroundMovement(const SMatrix& mvFrom, const SMatrix& mvTo, const SBaseMovmentCollisionInfo& CollisionInfo) override;
	void UpdateOutsideControl() override;
	bool AllowRemoveControl(const ZHM5BaseMovement* pWantControlMovement) const override;
	void RemoveControl() override;
	void ResetMovement(EHM5ResetReason eReason) override;
	void UpdateCameraProfile(SHM5GameCamParams& CurrentProfile) override;
	void UpdateCameraEvent(SCameraUpdateEvent& CameraUpdateEvent) const override;
	unsigned int ShowItems() const override;
	void ReinitializeMorphemeData(IMorphemeEntity* pMorphemeEntity) override;
	void UpdateAim(SHM5AimInfo& sAimInfo) const override;
	void UpdateMovement() override;
	void UpdateGroundMovement(SMatrix& mvFrom, SMatrix& mvTo) override;

	ZHM5MovementCloseCombat() = default;
	ZHM5MovementCloseCombat(IMorphemeEntity* pMorphemeEntity, const TEntityRef<ZHitman5>& pHitman);
	bool IsAttackAvailable() const;
	bool IsReactMove() const;
	bool IsTakeDownAvailable() const;
	bool IsHumanShieldAvailable() const;
	bool IsKnifeFromBehind() const;
	bool IsKnifeKilling() const;
	bool IsPropBashKilling() const;
	bool IsAttackWindowActive() const;
	bool IsAttackActive() const;
	void ResetAttackButton();
	bool ActivateAttackButton() const;
	void ResetSnapNeckButton();
	bool ActivateSnapNeckButton() const;
	void ResetCCButtonActivated();
	int GetCCButtonActivated() const;
	int GetCCChoiceActive() const;
	bool GetCCShowChoices() const;
	bool GetCCShowIcons() const;
	bool GetCCShowFlashingIcons() const;
	bool GetCCChoiceSuccess() const;
	bool GetTakeDownWindows(float& fAnimFraction, int& nTakeDownWindows, const float** pImpacts) const;
	const TEntityRef<ZActor>& GetCloseCombatTarget() const;
	const TEntityRef<ZActor>& GetCloseCombatTargetPtr() const;
	bool SynchNodeTime(const TEntityRef<ZActor>& rActor, const SAnimNodeHitman** pHitmanNode, float& fTime, float& fBlendTime, SMatrix& mNPCAlign, bool& bTakeDownOverride, bool& bNodeTransitted);
	bool IsIdle(const TEntityRef<ZActor>& rActor) const;
	bool IsInCombat(const TEntityRef<ZActor>& rActor) const;
	void FindNodes(const TEntityRef<ZActor>& rActor);
	bool IsInCloseCombatState() const;
	bool IsInPistolFinisher() const;
	bool HitmanKnockOut() const;
	bool IsChoking() const;
	bool IsChokingAtAll() const;
	bool IsCoverTakedown() const;
	bool CanSnapNeck() const;
	bool CanPropKill() const;
	bool CanShowSnapNeckPrompt() const;
	bool CanSilentKill(const TEntityRef<ZActor>& rActor) const;
	bool CanDoPistolFinisher() const;
	bool CanCoverTakedown() const;
	bool AllowAnimAfterCCEnd() const;
	bool CanStartCloseCombat() const;
	bool CanJoinCloseCombat() const;
	bool IgnoreTarget(const TEntityRef<ZActor>& rActor) const;
	ZHM5CCAnimDatabase* GetAnimDataBase() const;
	ZHM5CCAnimController* GetAnimController() const;
	ZHM5CCTargetController* GetTargetController() const;
	void EscapeCloseCombat();
	void EndCloseCombat(bool bEnterHumanShield);
	void StartCloseCombat(SHM5CCTarget* pTarget);
	void EvaluateTargets(bool bCheckDirection, SHM5CCTarget* pIgnoreTarget);
	bool CanHitmanStartCC() const;
	bool CCActionAllowed(ECCNodeType eStartState) const;
	ZHM5CoverPlane* CCGetCoverPlane();
	bool WasInCover() const;
	bool IsSpecialHitAllowed() const;
	bool IsAutopilotTakedown() const;
	unsigned int CanStartCC() const;
	const TEntityRef<ZActor>& GetPreTarget();
	EActorDeathType GetActorDeathType() const;
	ZPF5Location GetCCLocation() const;
	bool IsBossDeathSequence() const;
	void PlaceHighlightDecal(unsigned int boneID);
	bool CanQueueAttack() const;
	bool CanChangeOpponent() const;
	bool CounterAttack() const;
	void UpdateCloseCombat();
	void UpdateFakeCloseCombat();
	void UpdateBossDeathSequence();
	bool Attack();
	void UpdateTimeMultiplier();
	void UpdateAttack(float fDeltaTime, const SCloseCombatEvents& Events);
	void ResetAttack();
	void SetAttackAvailable();
	void UpdateSoundFractions();
	void SetHitmanState(bool bEnterCC);
	void ApplyHitmanDamage(float fDamage);
	bool KnockHitmanOut() const;
	void FireSoundEvent(unsigned int nPinID, const ZVariantRef& data);
	float GetAttackTime() const;
	bool AddPendingTarget(const TEntityRef<ZActor>& rActor, ECCNodeType eStartState);
	bool HasTargetGunEquipped(const SHM5CCTarget* pTarget) const;
	bool HasTargetHandGun(const SHM5CCTarget* pTarget) const;
	void BulletGuardTargetGun(const SHM5CCTarget* pTarget);
	ECCNodeType GetCurrentNodeType() const;
	SHM5CCTarget* SetupCrowdTarget(const TEntityRef<ZCrowdActor>& pCrowdTarget);
	void ApplySanchezDamage(const float fDamage);
	bool ExecuteSpecialMove();
	void Transit(ECCNodeType eNodeType, bool bFirstAttack, unsigned int nAnimNum, bool bForce);
	void UpdateSound(const SCloseCombatEvents& Events);
	void UpdateHitNum(const SCloseCombatEvents& Events);
	void UpdateNetworkAndCombatChain(const SCloseCombatEvents& Events);
	void UpdateProp(const SCloseCombatEvents& Events);
	void UpdateAttackChain(const SCloseCombatEvents& Events);
	SHM5CCTarget* SelectTarget();
	void UpdateCamera(const SCloseCombatEvents& Events);
	void ResetTakeDownWindows();
	void SetupTakeDownWindows();
	void SetRumble(float fRight, float fLeft);
	void CheckScaling(const SCloseCombatEvents& Events);
	void CheckTransitOut(const SCloseCombatEvents& Events);
	void BlendCameraToLocomotion();
	void StartTargetScale(bool scaleUp);
	void EndTargetScale();
	void UpdateTargetScale();
	void ForceRecoveryCamPos();
	void CasheActorDeathType();
	ECCNodeType GetAttackType(ECCNodeType eDefaultNode) const;
};
