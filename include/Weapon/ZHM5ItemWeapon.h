#pragma once

#include "ZHM5Item.h"
#include "IHM5ItemWeapon.h"
#include "ZHM5WeaponBasicConfigEntity.h"
#include "IParticleEmitterEntity.h"
#include "ZHM5WeaponSoundSetupEntity.h"
#include "ISoundDefinition.h"
#include "ZHM5ProjectilePool.h"
#include "ZHM5WeaponConfigurator.h"
#include "ISequenceEntity.h"

struct SVector2;
struct SGameUpdateEvent;

class ZHM5ItemWeapon : public ZHM5Item, public IHM5ItemWeapon
{
public:
	enum
	{
		COPYABLE = 0,
		ASSIGNABLE = 0
	};

	TEntityRef<ZHM5WeaponBasicConfigEntity> m_BasicConfigEntity;
	ZEntityRef m_AmmoProperties;
	bool m_bSemiAutoOperation;
	bool m_bFullAutoOperation;
	int m_nShotsPerMinute;
	int m_nNPCShotsPerMinute;
	int m_nNPCShotsPerMinuteVariance;
	float m_fMuzzleVelocity;
	float m_fCloseRange;
	float m_fNearRange;
	float m_fMediumRange;
	float m_fFarRange;
	float m_fAINearCombatRange;
	float m_fAIFarCombatRange;
	float m_fDamageMultiplier;
	float m_fReloadFactor;
	float m_fMuzzleEnergyMultiplier;
	eWeaponType m_WeaponType;
	ZRuntimeResourceID m_ridClipTemplate;
	float m_fImpactForce;
	float m_fRagdollImpactForce;
	float m_fRagdollImpactUpKick;
	EWeaponAnimationCategory m_eAnimationCategory;
	ZEntityRef m_pVariationResource;
	EHM5SoundBulletType m_eSoundBulletType;
	float m_fNPCDamageMultiplier;
	ZEntityRef m_MuzzleExit;
	ZEntityRef m_MuzzleFlash;
	ZEntityRef m_MuzzleSmoke;
	ZEntityRef m_Light;
	ZEntityRef m_CartridgeEject;
	float m_fCartridgeEjectForceMultiplier;
	TEntityRef<IParticleEmitterEntity> m_MuzzleFlashEffect;
	TEntityRef<IParticleEmitterEntity> m_MuzzleSmokeEffect;
	TEntityRef<ISequenceEntity> m_LightEffect;
	float m_fSilencerGFXOffset;
	bool m_fHitmanAutoreload;
	float m_fPrecisionMinDegree;
	float m_fPrecisionMaxDegree;
	float m_fPrecisionTime;
	int m_fPrecisionNumBullets;
	float m_fPrecisionRecoveryTime;
	float m_fPrecisionRecoverySpeed;
	float m_fPrecisionRecoveryDelay;
	float m_fOTSCamPrecisionModifier;
	float m_fStandNotMovingPrecisionModifier;
	float m_fStandMovingPrecisionModifier;
	float m_fSneakNotMovingPrecisionModifier;
	float m_fSneakMovingPrecisionModifier;
	float m_fBlindfirePrecisionModifier;
	float m_fCoverPrecisionModifier;
	float m_fScopeModePrecisionDegree;
	float m_fPrecisionShotMultiplier;
	float m_fCrosshairOffset;
	float m_fCrosshairScale;
	float m_fRecoilX;
	float m_fRecoilZ;
	float m_fRecoilVertialRange;
	float m_fRecoilHorizontalRange;
	float m_fRecoilDelay;
	float m_fRecoilRecoveryDelay;
	float m_fRecoilRecoverySpeed;
	float m_fRecoilEaseTime;
	float m_fRecoilMax;
	bool m_bScopedWeapon;
	ZEntityRef m_ScopePosition;
	TArray<SVector2> m_aScopeZoom;
	float m_fScopeFOV;
	SVector3 m_vBobbingAngleX;
	SVector3 m_vBobbingAngleY;
	SVector3 m_vBobbingFrequencyX;
	SVector3 m_vBobbingFrequencyY;
	float m_fPulseIncreaseOnShooting;
	float m_fDragCorrectionFraction;
	float m_fDragCorrectionTime;
	SVector2 m_vDragAngles;
	float m_fZRecoilDistance;
	float m_fZRecoilTime;
	float m_fCounterRotationFactor;
	ZEntityRef m_ScopeCrossHair;
	TEntityRef<ZHM5WeaponSoundSetupEntity> m_SoundSetup;
	TEntityRef<ISoundDefinition> m_SoundDefinitionEntity;
	TEntityRef<ZHM5WeaponHandPosBox> m_LeftHandPos;
	ZRuntimeResourceID m_EquippedMaterial;
	ZHM5ProjectilePool m_ProjectilePool;
	ZHM5WeaponConfigurator m_Configurator;
	ZSpatialEntity* m_pMuzzleExit;
	ZSpatialEntity* m_pMuzzleFlash;
	ZSpatialEntity* m_pMuzzleSmoke;
	ZSpatialEntity* m_pLight;
	ZSpatialEntity* m_pCartridgeEject;
	IHM5AmmoProperties* m_pAmmoProperties;
	eWeaponOperation m_CurrentWeaponOperation;
	int m_nWeaponOperationBitmask;
	float4 m_vTargetPos;
	unsigned short m_nBulletsToFire;
	unsigned short m_nMinNumOfBulletsToFire;
	unsigned short m_nBulletsFired;
	unsigned short m_nBulletsInMagazine;
	unsigned short m_nBulletsBeforeAmmoSuck;
	unsigned short m_iBulletsSinceLastTracer;
	unsigned short m_nAIReloadPercentage;
	ZGameTime m_tLastShootTime;
	float m_fTimeBetweenShots;
	float m_fNPCTimeBetweenShots;
	float m_fPrecisionFactor;
	unsigned int m_nFrameNumber;
	SMatrix43 m_mvPreCartridgeEjectMatPos;
	float m_fFirstShotPrecision;
	bool m_bFrmUpdateActive : 1;
	bool m_bFireStarted : 1;
	bool m_bFireEndRequested : 1;
	bool m_bCanPlayEmptySound : 1;
	bool m_bSupressWeaponEquippedSignal : 1;
	bool m_bUseAlternateFire : 1;
	bool m_bAllowActorHitActor : 1;
	bool m_bAllowAIEvents : 1;
	bool m_bWaitingForUpgradesRefresh : 1;
	bool m_bAttemptMarkAsPickedUp : 1;
	bool m_bPendingChangeAlternateFire : 1;
	bool m_bInitialInventoryBulletsGiven : 1;
	bool m_bInitialClipBulletsGiven : 1;

	static SComponentMapEntry s_componentMap[0];
	static unsigned int m_snFirstSMGShot;
	static unsigned int m_snNormalShot;
	static unsigned int m_snEmptyShot;
	static unsigned int m_snTriggerRelease;
	static unsigned int m_snClipEmpty;
	static unsigned int m_snLeftHandShot;
	static unsigned int m_snWeaponEquipped;
	static unsigned int m_snWeaponUnEquipped;
	static unsigned int m_snWeaponPlayerEquipped;
	static unsigned int m_snWeaponPlayerUnEquipped;
	static unsigned int m_snWeaponSwapped;
	static unsigned int m_snWeaponStartReload;
	static unsigned int m_snOnFireProjectiles;
	static unsigned int m_snPlayerShot;
	static unsigned int m_snPlayerLoopShot;
	static unsigned int m_snNPCShot;
	static unsigned int m_snNPCLoopShot;
	static unsigned int m_snPlayerAllShots;
	static unsigned int m_snPlayerFirstBurstShot;
	static unsigned int m_snPlayerSecondBurstShot;
	static unsigned int m_snPlayerEndBurstShot;
	static unsigned int m_snNPCAllShots;
	static unsigned int m_snNPCFirstBurstShot;
	static unsigned int m_snEndFire;
	static unsigned int m_snImpactFrontSide;
	static unsigned int m_snImpactBack;
	static unsigned int m_snDeadlyThrowImpact;

	~ZHM5ItemWeapon() override = default;
	ZVariantRef GetVariantRef() const override;
	int AddRef() override;
	int Release() override;
	void* QueryInterface(STypeID* iid) override;
	void Activate(const ZString& sSubset) override;
	void Deactivate(const ZString& sSubset) override;
	void Init() override;
	void ResourceChanged() override;
	void CheckFireOwnershipPins() override;
	unsigned short GetCollisionLayer() const override;
	virtual void OnPrecisionRecovered();
	virtual float GetPrecisionMaxDegree() const;
	virtual float GetPrecisionTime() const;
	virtual void SignalClipEmpty();
	virtual float GetRecoilDelay() const;
	virtual float GetRecoilRecoveryDelay() const;
	virtual float GetRecoilHorizontalRange() const;
	virtual float GetRecoilVerticalRange() const;
	virtual float GetRecoilRecoverySpeed() const;
	virtual float GetRecoilMax() const;
	virtual float GetRecoilEaseTime() const;
	virtual void ToggleAlternateFireDeferred();

	eItemType GetItemType() const override;
	void OnAttachItem(const ZEntityRef& pOwner) override;
	void OnReleaseItem(bool bAddToPhysicsWorld) override;
	void ShowItem(bool bShow) override;
	void Reset() override;
	bool IsPercievedAsWeapon() const override;
	void ContentKitEntityRetrieved() override;

	void OnHitmanReloadWeapon() override;
	void OnHitmanReloadFraction(float fFraction, const ZString& strAnimName, bool bAborted, const float fAbortTime) override;
	void OnHitmanRecoilTime(float fRecoilTime, const ZString& strAnimName) override;
	void OnHitmanPointShootingFraction(float fFraction, const ZString& strAnimName) override;
	const ZEntityRef GetWeaponVariationResource() const override;
	IHM5AmmoProperties* GetAmmoProperties() const override;
	bool IsFiring() const override;
	bool SetWeaponOperation(eWeaponOperation wOp, bool bForce) override;
	float GetAINearCombatRange() override;
	float GetAIFarCombatRange() override;
	void SetTargetPos(const float4& vTargetPos) override;
	bool StartFire(float fFirstShotPrecision) override;
	bool EndFire() override;
	void OnFireWeaponRelease() override;
	SMatrix43 GetMuzzleExitRootMatPos() const override;
	SMatrix43 GetMuzzleFlashRootMatPos() override;
	SMatrix43 GetMuzzleSmokeRootMatPos() override;
	SMatrix43 GetMuzzleLightRootMatPos() override;
	SMatrix43 GetCartridgeEjectRootMatPos() override;
	SMatrix43 GetLeftHandTransform() override;
	void SetBulletsInMagazine(int nBullets) override;
	unsigned short GetBulletsInMagazine() const override;
	int GetBulletsBeforeAmmoSuck() const override;
	void UpdateBulletsBeforeAmmoSuck(bool bReset) override;
	float4 GetTargetPos() override;
	float GetMuzzleVelocity() override;
	bool IsCurrentClipLowOnAmmo() const override;
	float GetPrecisionDegree(float fPrecisionShotPrc) const override;
	void GetCrossHairFactors(float& fOffset, float& fScaling) const override;
	float CalcPrecisionDegree() const override;
	float GetOTSCamPrecisionModifier() const override;
	float GetStandNotMovingPrecisionModifier() const override;
	float GetStandMovingPrecisionModifier() const override;
	float GetSneakNotMovingPrecisionModifier() const override;
	float GetSneakMovingPrecisionModifier() const override;
	float GetBlindfirePrecisionModifier() const override;
	float GetPrecisionShotMultiplier() const override;
	float GetPrecisionFactor() const override;
	void SetPrecisionFactor(float fPrecisionFactor) override;
	eWeaponOperation GetCurrentWeaponOperation() const override;
	float GetDamageMultiplier() const override;
	float GetMuzzleEnergyMultiplier() const override;
	bool GetFiringStarted() const override;
	bool IsHandGun() const override;
	bool IsRevolver() const override;
	bool IsSmg() const override;
	bool IsRifle() const override;
	bool IsRPG() const override;
	bool IsSniper() const override;
	bool IsShotgun() const override;
	bool IsFireArm() const override;
	bool IsProjectileWeapon() const override;
	bool IsCloseCombatWeapon() const override;
	eWeaponType GetWeaponType() const override;
	EWeaponAnimationCategory GetAnimationCategory() const override;
	void PlayShotEffect(bool bExternal, int nBulletsFired) override;
	void PlayReleaseTriggerSound() override;
	void PlayEmptySound(bool bExternal) override;
	void PlayFireAnimation(bool bFinalShot) override;
	bool HasScope() const override;
	void ImmediateReload() override;
	void SetAIReloadPercentage(unsigned short nPercentage) override;
	bool NeedReloading() const override;
	void GetScopeParameters(SHM5ScopeParameters& ScopeParameters) const override;
	void ShowScopeRenderDestination(bool bShow) override;
	void SupressWeaponEquippedSignal() override;
	SVector2 GetRecoil() const override;
	float4 CreateProjectileVector(const float4& vProjectileStartPosition, const float4& vTargetPosition, float fPrecisionPrct) const override;
	TEntityRef<ZHM5WeaponHandPosBox> GetLeftHandPos() const override;
	float GetImpactForce() const override;
	float GetRagdollImpactForce() const override;
	float GetRagdollImpactUpKick() const override;
	bool IsSameType(const TEntityRef<IHM5Item> rItem) const override;
	bool HasAlternativeFire() const override;
	void ToggleAlternateFire() override;
	bool UseAlternateFire() const override;
	bool IsTurnedOn() const override;
	EHM5SoundBulletType GetSoundBulletType() const override;
	void OnWeaponEquipped() override;
	void OnWeaponUnEquipped() override;
	void OnWeaponPlayerEquipped() override;
	void OnWeaponPlayerUnEquipped() override;
	void OnWeaponPlayerSwapped() override;
	void OnCloseCombatImpact(bool bBehind, bool bLastImpact, const ZEntityRef& pHitTarget) override;
	void OnDeadlyThrowImpact() override;
	bool IsFiberwire() const override;
	IHM5ItemWeapon::EHM5DeadlyThrowType GetDeadlyThrowType() const override;
	bool IsPropUsable() const override;
	bool IsRemoteControlled() const override;
	EActorDeathType GetActorDeathType(bool bFront) const override;
	const SHM5WeaponConfig& GetConfig() const override;
	ZRuntimeResourceID GetEquippedMaterialResource() const override;
	bool IsAutoreloadEnabled() const override;
	bool IsBroken() const override;
	bool IsForcePickupDisabled() const override;

	ZHM5ItemWeapon() = default;
	static void RegisterType();
	ZHM5ItemWeapon(ZComponentCreateInfo& pInfo);
	void SetInitialBulletsGiven();
	void SetNPCDamageMultiplier(float fMultiplier);
	float GetNPCDamageMultiplier() const;
	SMatrix43 GetProjectileStartMatPos() const;
	bool SupportsFullAutoMode() const;
	void RefreshUpgradeStatus();
	void SetAllowActorHitActor(bool bAllow);
	void SetAllowAIEvents(bool bAllow);
	void AttemptMarkAsPickedUp_AfterUpdate();
	TEntityRef<ZHM5WeaponBasicConfigEntity> GetBasicConfigEntity();
	void InitWeaponWithUpgradeInfo(bool bInfoFromKit);
	void SetEffectsPlacement();
	void OnEjectCartridge();
	bool IsSilencedType() const;
	void SetWeaponOperationsBitmask();
	void ActivateFrameUpdate();
	void DeactivatFrameUpdate();
	void FrameUpdate(const SGameUpdateEvent& updateEvent);
	void FireUpdate(float fDeltaFrameTime);
	void FireProjectiles();
	void PlayFireSound(int nBulletsFired);
	float GetTimeBetweenShots() const;
	SMatrix43 GetPosBoxRootMatPos(ZSpatialEntity* pSpatial) const;
	SMatrix43 GetPosBoxRootMatPosWithOffset(ZSpatialEntity* pSpatial, const float4& vLocalOffset) const;
	void ActivateClip();
	void CollectPreFramePosInformations();
	void ActivateEffects();
	void InitResouceDependentProperties();
	int GetWorstCaseNumLiveBullits() const;
	void ApplyUpgradesFromFireArmKit();
	void SetBoneVisibilityFlags();
	float GetHitmanPrecisionModifier(const TEntityRef<ZHitman5>& rHitman) const;
	void AttemptMarkAsPickedUp_Execute();
};
